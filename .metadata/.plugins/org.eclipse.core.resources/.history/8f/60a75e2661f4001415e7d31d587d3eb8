/*
 * proxy-server.c
 *
 *  Created on: May 4, 2015
 *      Author: mjwtom
 */


#include <stdio.h>
#include <stdlib.h>

#if 1
#include "config.h"
#include "network.h"
#include "protocol.h"
#else
#include "../include/config.h"
#include "../include/network.h"
#endif

int proxy(int client_fd, int dedupe_fd[], int dedupe_number, FILE* dedupe_file)
{
	struct msg_head head;
	char * buf;
	int read_size;
	buf = malloc(MAX_BUF_SIZE);
	if(NULL == buf)
	{
		printf("cannot malloc");
		return -1;
	}
	while(1)
	{
		if((read_size = recv(client_fd, &head, sizeof(struct msg_head), 0)) < 0)
		{
			printf("proxy-server recv msg head error");
			return -1;
		}
		if(head.type == PRO_END)
		{
			printf("data transfer end");
			break;
		}
		read_size = head.len;
		if((read_size = recv(client_fd, buf, read_size, 0)) < 0)
		{
			printf("data transfer error");
			return -1;
		}
	}
	free(buf);
	return 0;
}

int main(int argc, char * argv[]) {
	/*short port;
	char * recipe_filename;
	short dedupe_server_ports[MAX_DEDUPE_NODE];
	int dedupe_server_fds[MAX_DEDUPE_NODE];
	int dedupe_server_number;
	int fd, client_fd;
	int i;
	FILE * proxy_file;
	//skip the program name
	argc --;
	argv ++;

	port = PROXY_SERVER_PORT;
	recipe_filename = *argv;

	argc --;
	argv ++;
	i = 0;
	while(argc > 0)
	{
		dedupe_server_ports[i] = atoi(*argv);
		i ++;
		argc --;
		argv ++;
	}
	dedupe_server_number = i;

	for(i = 0 ; i < dedupe_server_number ; i ++)
	{
		dedupe_server_fds[i] = connect_server("127.0.0.1", dedupe_server_ports[i]);
		if(dedupe_server_fds[i] == -1)
		{
			printf("error connect to dedupe server\n");
			return -1;
		}
	}

	fd = get_server_socket(port);
	if(fd == -1)
	{
		printf("Error to get server socket");
		return -1;
	}
	proxy_file = fopen(recipe_filename, "a+");
	if(NULL == proxy_file)
	{
		printf("error creating proxy metadata file");
		return -1;
	}
	client_fd = accept_client(fd);
	proxy(client_fd, dedupe_server_fds, dedupe_server_number, proxy_file);*/
	int    socket_fd, connect_fd;
	struct sockaddr_in     servaddr;
	char    buff[4096];
	int     n;
	//初始化Socket
	if( (socket_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1 ){
	printf("create socket error: %s(errno: %d)\n",strerror(errno),errno);
	exit(0);
	}
	//初始化
	memset(&servaddr, 0, sizeof(servaddr));
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);//IP地址设置成INADDR_ANY,让系统自动获取本机的IP地址。
	servaddr.sin_port = htons(DEFAULT_PORT);//设置的端口为DEFAULT_PORT

	//将本地地址绑定到所创建的套接字上
	if( bind(socket_fd, (struct sockaddr*)&servaddr, sizeof(servaddr)) == -1){
	printf("bind socket error: %s(errno: %d)\n",strerror(errno),errno);
	exit(0);
	}
	//开始监听是否有客户端连接
	if( listen(socket_fd, 10) == -1){
	printf("listen socket error: %s(errno: %d)\n",strerror(errno),errno);
	exit(0);
	}
	printf("======waiting for client's request======\n");
	while(1){
//阻塞直到有客户端连接，不然多浪费CPU资源。
		if( (connect_fd = accept(socket_fd, (struct sockaddr*)NULL, NULL)) == -1){
		printf("accept socket error: %s(errno: %d)",strerror(errno),errno);
		continue;
	}
//接受客户端传过来的数据
	n = recv(connect_fd, buff, MAXLINE, 0);
//向客户端发送回应数据
	if(!fork()){ /*紫禁城*/
		if(send(connect_fd, "Hello,you are connected!\n", 26,0) == -1)
		perror("send error");
		close(connect_fd);
		exit(0);
	}
	buff[n] = '\0';
	printf("recv msg from client: %s\n", buff);
	close(connect_fd);
	}
	close(socket_fd);
	return EXIT_SUCCESS;
}
