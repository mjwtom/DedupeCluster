/*
 * dedupe.h
 *
 *  Created on: 2012-7-12
 *      Author: BadBoy
 */

#ifndef DEDUPE_H_
#define DEDUPE_H_

#include "config.h"
#include "file.h"
#include "disk-hash.h"
#include "cache.h"
#include "data.h"
#include "metadata.h"
#include "sha1.h"
#include "storage-manager.h"
#include "bloom-filter.h"
#ifdef COMPRESS
#include "lzjb.h"
#endif

#ifdef DEBUG
uint64_t dup_len = 0;
uint64_t total_len = 0;
uint64_t unique_len = 0;
#ifdef COMPRESS
uint64_t compressed_len = 0;
uint64_t comp_unique_len = 0;
#endif
#endif

struct dedupe_manager
{
	//the file to store all the data produced by the de-dudplication program
	struct storage_manager manager;

	//the meta-data segment in memory, when it's full, it will be written into disk
	struct mtdata_seg mt_seg;

	//the data segment in memory, when it's full, it will be written into disk
	struct data_seg dt_seg;

	//the data structure to handle the current file to be de-dupliated
	struct file_seg f_seg;

	//the cache for finger-print lookup
	struct cache cache;

	//the disk hash for finger-print lookup
	struct disk_hash disk_hash;

	//the chunk buffer to hold the chunk data
	char chunk_buf[MAX_CHUNK_LEN];

#ifdef COMPRESS
	char compress_buf[MAX_COMPRESS_LEN];
#endif

	//the bloom-filter
	char bf[BF_LEN];

	//the struct to store metadata read from disk to cache
	struct metadata mtdata[TO_CACHE_LEN];
};


int dedup_init(struct dedupe_manager * dedup, char * data_file_name)
{
	if(NULL == dedup)
		return -1;
	storage_manager_init(&(dedup->manager), data_file_name);
	dedup->f_seg.manager = &(dedup->manager);
	dedup->disk_hash.manager = &(dedup->manager);
	dedup->dt_seg.manager = &(dedup->manager);
	dedup->mt_seg.manager = &(dedup->manager);
	if(file_init(&(dedup->f_seg)) < 0)
		return -1;
	if(cache_init(&(dedup->cache)) < 0)
		return -1;
	if(disk_hash_init(&(dedup->disk_hash)) < 0)
		return -1;
	if(bloomfilter_init(dedup->bf) < 0)
		return -1;
	if(data_init(&(dedup->dt_seg)) < 0)
		return -1;
	if(metadata_init(&(dedup->mt_seg)) < 0)
		return -1;
	return 0;
}

int load_cache(struct mtdata_seg * seg, struct metadata * mtdata, uint64_t offset, struct cache * cache)
{
	int len;
	len = get_metadata(seg, mtdata, TO_CACHE_LEN, offset);
	add_metadata_in_cache(mtdata, len, cache);
	return 0;
}

int dedup_past_version(char * buf, uint32_t len, struct dedupe_manager * dedup)
{
	int ret = 0;
	int need_load_cache;
	struct metadata mtdata;
	struct disk_hash_node node;

#ifdef DEBUG
	total_len += len;
	int ori_len = len;
#endif

#ifdef COMPRESS
	mtdata.origin_len = len;
	len = lzjb_compress(buf, dedup->compress_buf, len, MAX_COMPRESS_LEN, 0);
	buf = dedup->compress_buf;
#ifdef DEBUG
	compressed_len += len;
#endif
#endif
	sha1((unsigned char *)buf, len, (unsigned char *)mtdata.fingerprint);

	need_load_cache = 0;
	mtdata.len = len;
	ret = bloom_filter_lookup(dedup->bf, (unsigned int *) mtdata.fingerprint);
	if(1 == ret)
	{
		ret = lookup_in_cache(&dedup->cache, mtdata.fingerprint, &mtdata);
		if(0 == ret)
		{
			ret = lookup_fingerprint_in_disk_hash(&dedup->disk_hash, mtdata.fingerprint, &node);
			if(1 == ret)
			{
				mtdata.offset = node.data_offset;
				need_load_cache = 1;
			}
		}
	}
	if(0 == ret)
	{
		mtdata.offset = add_data(buf, len, &dedup->dt_seg);
		node.data_len = len;
		node.mtdata_offset = add_metadata(mtdata, &(dedup->mt_seg));
		node.data_offset = mtdata.offset;
		memcpy(node.fingerprint, mtdata.fingerprint, FINGERPRINT_LEN);
		add_2_disk_hash(&dedup->disk_hash, node);
	}
	else
	{
		add_metadata(mtdata, &(dedup->mt_seg));
		if(need_load_cache)
		{
			load_cache(&(dedup->mt_seg), dedup->mtdata, node.mtdata_offset, &dedup->cache);
		}
	}
#ifdef DEBUG
	if(1 == ret)
	{
		dup_len += ori_len;
	}
	else
	{
		unique_len += ori_len;
#ifdef COMPRESS
		comp_unique_len += len;
#endif
	}
#endif
	return ret;
}

int destroy(struct dedupe_manager * dedup)
{
	fclose(dedup->manager.f);
	return 0;
}

#endif /* DEDUPE_H_ */
